= HTML Namespacing

HTML Namespacing automatically adds HTML class attributes to partial HTML
code.

The intent is for HTML, CSS, and JavaScript files to be "namespaced" according
to their location in the filesystem. That way, CSS and JavaScript can be scoped
to individual HTML files--even automatically.

== Installing

  gem install adamh-html_namespacing --source http://gems.github.com

== Using

HTML Namespacing can be used on its own for a snippet of code:

  require 'rubygems'
  require 'html_namespacing'

  html = '<p>Here is some <em>HTML</em>!</p>'

  # Returns '<p class="foo">Here is some <em>HTML</em>!</p>'
  namespaced = HtmlNamespacing::add_namespace_to_html(html, 'foo')

== Details

Only root tags will be namespaced. For instance, all <tt>p</tt> tags in this
example will have a class added, but no other tags:

  <p>This is a root tag. <b>This tag is nested.</b></p>
  <p>This is another root tag.</p>

Because XML, DOCTYPE, comments, and <tt>html</tt> tags do not allow the
<tt>class</tt> attribute, the following HTML will pass through unchanged:

  <?xml version="1.0"?>
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
  <!-- Here is a comment -->
  <html>
    <head>
      <title>Hello</title>
    </head>
    <body>
      <p>Blah blah blah</p>
    </body>
  </html>

(The following elements do not support the <tt>class</tt> attribute:
<tt>html</tt>, <tt>head</tt>, <tt>base</tt>, <tt>meta</tt>, <tt>title</tt>,
<tt>link</tt>, <tt>script</tt>, <tt>noscript</tt>, <tt>style</tt>.)

Though the actual namespacing functions are written in pure C with no
dependencies, only Ruby bindings are available at this time.

== Integrating in a Rails project

HTML namespacing is meant to integrate into a framework. Here is a Rails
example:

In <tt>config/environment.rb</tt>:

  config.gem 'html_namespacing'

In <tt>config/initializers/html_namespacing.rb</tt>:

  HtmlNamespacing::Plugin::Rails.install

Now, all templates will have HTML namespacing applied. For instance, with a
<tt>views/foos/show.html.erb</tt> like this:

  <p>
    <b>Name:</b>
    <%=h @foo.name %>
  </p>

  <%= render(:partial => @foo) %>

  <%= link_to 'Edit', edit_foo_path(@foo) %> |
  <%= link_to 'Back', foos_path %>

The following HTML might be generated (depending on the <tt>_details</tt>
partial and the data in the actual <tt>Foo</tt> object):

  <p class="foos-show">
    <b>Name:</b>
    Foo
  </p>

  <p class="foos-_foo foos-show">
    <b>Description:</b>
    Bar
  </p>

  <a href="/foos/1/edit" class="hellos-show">Edit</a> |
  <a href="/foos" class="hellos-show">Back</a>

== Integrating with Haml and Sass in Rails

With Haml:http://haml-lang.com/ and Sass:http://sass-lang.com/ namespacing can
be automated even further.

In your Rails project, implement the following:

In <tt>config/environment.rb</tt>:

  config.gem 'haml', :version => '2.2.0'
  config.gem 'adamh-html_namespacing', :library => 'html_namespacing'

In <tt>config/initializers/html_namespacing.rb</tt>:

  HtmlNamespacing::Plugin::Rails.install
  HtmlNamespacing::Plugin::Sass.install

Then add <tt>stylesheet_link_tag(:all, :recursive => true)</tt> to your layout.

Now, all templates will have HTML namespacing applied, and Sass files in
<tt>SASS_DIR/views</tt> (where <tt>SASS_DIR</tt> is Sass's
<tt>:template_location</tt>, default <tt>public/stylesheets/sass</tt>) will
also be HTML-namespaced. For example:

With a partial, <tt>app/views/foos/show.html.haml</tt> like this:

  %p
    %strong Name:
    %span.name&= @foo.name

  = render(:partial => @foo)

  = link_to('Edit', edit_foo_path(@foo)
  |
  = link_to('Back', foos_path

And a Sass file in <tt>public/stylesheets/sass/views/foos/show.sass</tt>:

  strong
    :font-size 1.3em
  span.name
    :font-style italic
  a&
    :font-weight bold

The Sass rules will only apply to their corresponding partial.

(Note: to target root-level elements in a Sass partial, use the "&" rule,
which is standard Sass and will equate to ".NAMESPACE" in this context.)

=== Options

Available options to <tt>HtmlNamespacing::Plugin::Rails.install</tt> are:

<tt>:path_to_namespace_callback</tt>: Ruby lambda function which accepts a
relative path (e.g., "foo/bar") and returns an HTML namespacing string
(e.g., "foo-bar"). The default is:

  lambda { |path| path.gsub('/', '-') }

If the callback returns <tt>nil</tt>, HTML namespacing will not be applied.

<tt>:handle_exception_callback</tt>: Ruby lambda function which accepts
an <tt>Exception</tt>, an <tt>ActionView::Template</tt>, and an
<tt>ActionView::Base</tt>. The default behavior is:

  lambda { |exception, template, view| raise(exception) }

If your <tt>:handle_exception_callback</tt> does not raise an exception,
the template will be rendered as if HtmlNamespacing were not installed.

<tt>:javascript</tt>: If set, enable
<tt>html_namespacing_javascript_tag()</tt> (see below). You will need to
<tt>include HtmlNamespacing::Plugin::Rails::Helpers</tt> in your helpers to
gain access to this method.

<tt>:javascript_root</tt>: Root of namespaced JavaScript files, if you are
using <tt>html_namespacing_javascript_tag()</tt> (see below).

<tt>:javascript_optional_suffix</tt>: optional suffix for your JavaScript
files, if you are using <tt>html_namespacing_javascript_tag()</tt>. For
instance, if <tt>:javascript_optional_suffix</tt> is <tt>'compressed'</tt> and
you rendered the partial <tt>app/views/foos/_foo.html.haml</tt>, then the
(presumably minified) file
<tt>app/javascripts/views/foos/_foo.compressed.js</tt> will be included if it
exists (otherwise the standard <tt>app/javascripts/views/foos/_foo.js</tt>,
otherwise nothing).

Available options to <tt>HtmlNamespacing::Plugin::Sass.install</tt> are:

<tt>:prefix</tt> (default <tt>views</tt>): subdirectory of Sass directory for
which we want to namespace our Sass.
<tt>:callback</tt>: See <tt>:template_to_namespace_callback</tt> above; this
callback is similar, though it accepts a string path rather than an
<tt>ActionView::Template</tt>.

== Why?

HTML namespacing gives huge benefits when writing CSS and JavaScript:
especially if the CSS and JavaScript components are automatically namespaced
in a similar manner.

Imagine we have the following namespaced HTML:

  <div class="foos-show">
    <p>In the show partial</p>
    <div class="foos-_details">
      <p>In the details partial</p>
      <div class="foos-_description">
        <p>In the description</p>
      </div>
    </div>
  </div>

=== CSS Namespacing

We can set three CSS rules:

  .foos-show p { font-size: 1.1em; }
  .foos-_details p { font-weight: bold; }
  .foos-_description p { font-style: italic; }

In such an example, the top paragraph would be large, the second would be large
and bold, and the third would be large, bold, and italic.

The benefit comes when automating these namespaces. For instance, if the CSS
rules were placed in <tt>stylesheets/views/foos/show.css</tt>,
<tt>stylesheets/views/foos/_details.css</tt>, and
<tt>stylesheets/views/foos/_description.css</tt>, respectively, and a
preprocessor inserted the namespace before (or within) every rule in the file,
all CSS namespacing would be done for free, so you would be able to write:

<tt>stylesheets/views/foos/show.css</tt>:

  p { font-size: 1.1em; }

<tt>stylesheets/views/foos/_details.css</tt>:

  p { font-weight: bold; }

<tt>stylesheets/views/foos/_description.css</tt>:

  p { font-style: italic; }

Thus, the namespaces would never need to be explicitly mentioned. The
framework used to generate such CSS is left (for now) as an exercise to the
reader.

=== jQuery Namespacing

Use the following Rails helper, possibly in your default layout:

<tt>html_namespacing_javascript_tag(:jquery)</tt>

Afterwards, similar to our namespaced CSS framework above, you can easily
namespace JavaScript behavior:

<tt>app/javascripts/views/foos/_description.js</tt>:

  $NS().find('p').click(function() { alert("Yup, you clicked!"); });

You just write code specific to one Rails partial without actually writing the
partial's name anywhere, and you will not need to rewrite any selectors if you
rename or move the partial (as long as you rename or move the corresponding
JavaScript file).

(All namespaced JavaScript partials will be included inline, all in separate
<tt>jQuery(document).ready()</tt> blocks. Two local variables will be
available: <tt>NS</tt>, the namespace string, and <tt>$NS()</tt>, a function
returning a jQuery object containing all elements at the root of the
namespace.)

=== Caching and JavaScript Namespacing

Caching throws a wrench into operations.
<tt>html_namespacing_javascript_tag()</tt> works by watching which templates get
rendered; when reading from the cache, not all templates will have
<tt>render()</tt> called on them.

The general solution is to cache the list of rendered templates along with the
data being cached. A new view method, <tt>html_rendering_rendered_paths</tt>,
returns an Array to be used for this purpose. As a practical example, here is a
plugin which makes JavaScript namespacing work with
{cache_advance}[http://github.com/aub/cache_advance]:

  class HtmlNamespacingCachePlugin
    def self.key_suffix
      'HTML_NAMESPACING_DATA'
    end
  
    def cache_it_options(view)
      { :view => view }
    end
  
    def before_render(cache_name, cache_key, options)
      options[:html_namespacing_rendered_paths_length] = paths(options).length
    end
  
    def after_render(cache_name, cache_key, data, options)
      old_length = options[:html_namespacing_rendered_paths_length]
      new_length = paths(options).length
  
      delta = paths(options)[old_length..new_length]
      unless delta.empty?
        key = cache_key + self.class.key_suffix
        Rails.cache.write(key, delta)
      end
    end
  
    def after_read(cache_name, cache_key, data, options)
      key = cache_key + self.class.key_suffix
      if delta = Rails.cache.read(key)
        paths(options).concat(delta)
      end
    end
  
    protected
  
    def paths(options)
      options[:view].html_namespacing_rendered_paths
    end
  end

Other plugins are welcome; I will consider integrating them into this project.

== Tips and Tricks

You may find that HTML namespacing works best when each HTML partial is wrapped
in its own <tt>div</tt> tag. Both CSS's child selectors and jQuery's
<tt>find()</tt> function will ordinarily ignore the element with the namespace
class, only selecting sub-elements. For instance, with this HTML:

  <div class="foos-show">
    <p>Hello</p>
  </div>

If you wrote the following CSS:

  .foos-show div { font-weight: bold; }

Or this Sass:

  div
    :font-weight bold

Or the following JavaScript (following the <tt>$NS</tt> example above):

  var $div = $NS().find('div');

Nothing will be selected, because the <tt>div</tt> element is not a child.
Instead, you need the following CSS:

  div.foos-show { font-weight: bold; }

Or this sass:

  div&
    :font-weight bold

Or the following JavaScript:

  var $div = $NS().filter('div');

Also, watch out for nesting: selectors with the <tt>foos-show</tt> namespace
will match anything inside any partials rendered by
<tt>foos/show.html.erb</tt>. As a rule of thumb to circumvent this problem: the
wider the namespaces's scope, the less CSS and JavaScript you should write
which depends on it. (Use sub-partials very liberally.)

HTML namespacing produces plenty of tiny CSS and/or JavaScript files. Best
practice is to bundle all namespaced files together: by virtue of being
namespaced, it is safe to concatenate them. (Advanced CSS users should
be thoughtful about
{cascading order and specificity}[http://www.w3.org/TR/CSS2/cascade.html#cascading-order]
and anybody bundling JavaScript files together should wrap each with
<tt>(function() { ... })();</tt> to prevent variable leakage.) CSS files can be
concatenated using a tool such as
{asset_library}[http://github.com/adamh/asset_library]; JavaScript files are
concatenated automatically in <tt>html_namespacing_javascript_tag()</tt>.

These and similar strategies should be considered when building an HTML
namespacing framework.

== License

I believe in software freedom, not any abomination thereof. This project is
released under the Public Domain, meaning I relinquish my copyright (to any
extend the law allows) and grant you all rights to use, modify, sell, or
otherwise take advantage of my software.

However, I do kindly request that, as a favor, you refrain from using my
software as part of an evil plan involving velociraptors and mind-controlling
robots (even though I would not be legally entitled to sue you for doing so).
